// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertDiet = `-- name: InsertDiet :one
insert into diet (meal, time, items)
values ($1, $2, $3)
returning id, meal, items, time
`

type InsertDietParams struct {
	Meal  pgtype.Text
	Time  pgtype.Timestamp
	Items []string
}

func (q *Queries) InsertDiet(ctx context.Context, arg InsertDietParams) (Diet, error) {
	row := q.db.QueryRow(ctx, insertDiet, arg.Meal, arg.Time, arg.Items)
	var i Diet
	err := row.Scan(
		&i.ID,
		&i.Meal,
		&i.Items,
		&i.Time,
	)
	return i, err
}

const insertMenstrual = `-- name: InsertMenstrual :one
insert into menstrual (cycle_day, pain_rating, stress_level, medication)
values ($1, $2, $3, $4)
returning id, cycle_day, pain_rating, stress_level, medication
`

type InsertMenstrualParams struct {
	CycleDay    pgtype.Int4
	PainRating  pgtype.Int4
	StressLevel pgtype.Int4
	Medication  []string
}

func (q *Queries) InsertMenstrual(ctx context.Context, arg InsertMenstrualParams) (Menstrual, error) {
	row := q.db.QueryRow(ctx, insertMenstrual,
		arg.CycleDay,
		arg.PainRating,
		arg.StressLevel,
		arg.Medication,
	)
	var i Menstrual
	err := row.Scan(
		&i.ID,
		&i.CycleDay,
		&i.PainRating,
		&i.StressLevel,
		&i.Medication,
	)
	return i, err
}

const insertSleep = `-- name: InsertSleep :one
insert into sleep (duration, efficiency, deep_pct, latency, num_awakenings)
values ($1, $2, $3, $4, $5)
returning id, duration, efficiency, deep_pct, latency, num_awakenings
`

type InsertSleepParams struct {
	Duration      pgtype.Float8
	Efficiency    pgtype.Int4
	DeepPct       pgtype.Int4
	Latency       pgtype.Int4
	NumAwakenings pgtype.Int4
}

func (q *Queries) InsertSleep(ctx context.Context, arg InsertSleepParams) (Sleep, error) {
	row := q.db.QueryRow(ctx, insertSleep,
		arg.Duration,
		arg.Efficiency,
		arg.DeepPct,
		arg.Latency,
		arg.NumAwakenings,
	)
	var i Sleep
	err := row.Scan(
		&i.ID,
		&i.Duration,
		&i.Efficiency,
		&i.DeepPct,
		&i.Latency,
		&i.NumAwakenings,
	)
	return i, err
}
