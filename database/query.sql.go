// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllDiet = `-- name: GetAllDiet :many
select id, meal, date, items, notes from diet
`

func (q *Queries) GetAllDiet(ctx context.Context) ([]Diet, error) {
	rows, err := q.db.Query(ctx, getAllDiet)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Diet
	for rows.Next() {
		var i Diet
		if err := rows.Scan(
			&i.ID,
			&i.Meal,
			&i.Date,
			&i.Items,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMenstrual = `-- name: GetAllMenstrual :many
select id, period_event, date, flow_level, notes from menstrual
`

func (q *Queries) GetAllMenstrual(ctx context.Context) ([]Menstrual, error) {
	rows, err := q.db.Query(ctx, getAllMenstrual)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Menstrual
	for rows.Next() {
		var i Menstrual
		if err := rows.Scan(
			&i.ID,
			&i.PeriodEvent,
			&i.Date,
			&i.FlowLevel,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSleep = `-- name: GetAllSleep :many
select id, date, duration, quality, disruptions, notes from sleep
`

func (q *Queries) GetAllSleep(ctx context.Context) ([]Sleep, error) {
	rows, err := q.db.Query(ctx, getAllSleep)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sleep
	for rows.Next() {
		var i Sleep
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Duration,
			&i.Quality,
			&i.Disruptions,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSymptoms = `-- name: GetAllSymptoms :many
select id, date, nausea, fatigue, pain, notes from symptoms
`

func (q *Queries) GetAllSymptoms(ctx context.Context) ([]Symptom, error) {
	rows, err := q.db.Query(ctx, getAllSymptoms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Symptom
	for rows.Next() {
		var i Symptom
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Nausea,
			&i.Fatigue,
			&i.Pain,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDiet = `-- name: InsertDiet :one
insert into diet (meal, date, items, notes)
values ($1, $2, $3, $4)
returning id, meal, date, items, notes
`

type InsertDietParams struct {
	Meal  pgtype.Text
	Date  pgtype.Date
	Items []string
	Notes pgtype.Text
}

func (q *Queries) InsertDiet(ctx context.Context, arg InsertDietParams) (Diet, error) {
	row := q.db.QueryRow(ctx, insertDiet,
		arg.Meal,
		arg.Date,
		arg.Items,
		arg.Notes,
	)
	var i Diet
	err := row.Scan(
		&i.ID,
		&i.Meal,
		&i.Date,
		&i.Items,
		&i.Notes,
	)
	return i, err
}

const insertMenstrual = `-- name: InsertMenstrual :one
insert into menstrual (period_event, date, flow_level, notes)
values ($1, $2, $3, $4)
returning id, period_event, date, flow_level, notes
`

type InsertMenstrualParams struct {
	PeriodEvent pgtype.Text
	Date        pgtype.Date
	FlowLevel   pgtype.Text
	Notes       pgtype.Text
}

func (q *Queries) InsertMenstrual(ctx context.Context, arg InsertMenstrualParams) (Menstrual, error) {
	row := q.db.QueryRow(ctx, insertMenstrual,
		arg.PeriodEvent,
		arg.Date,
		arg.FlowLevel,
		arg.Notes,
	)
	var i Menstrual
	err := row.Scan(
		&i.ID,
		&i.PeriodEvent,
		&i.Date,
		&i.FlowLevel,
		&i.Notes,
	)
	return i, err
}

const insertSleep = `-- name: InsertSleep :one
insert into sleep (date, duration, quality, disruptions, notes)
values ($1, $2, $3, $4, $5)
returning id, date, duration, quality, disruptions, notes
`

type InsertSleepParams struct {
	Date        pgtype.Date
	Duration    pgtype.Float8
	Quality     pgtype.Int4
	Disruptions pgtype.Text
	Notes       pgtype.Text
}

func (q *Queries) InsertSleep(ctx context.Context, arg InsertSleepParams) (Sleep, error) {
	row := q.db.QueryRow(ctx, insertSleep,
		arg.Date,
		arg.Duration,
		arg.Quality,
		arg.Disruptions,
		arg.Notes,
	)
	var i Sleep
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Duration,
		&i.Quality,
		&i.Disruptions,
		&i.Notes,
	)
	return i, err
}

const insertSymptoms = `-- name: InsertSymptoms :one
insert into symptoms (date, nausea, fatigue, pain, notes)
values ($1, $2, $3, $4, $5)
returning id, date, nausea, fatigue, pain, notes
`

type InsertSymptomsParams struct {
	Date    pgtype.Date
	Nausea  pgtype.Int4
	Fatigue pgtype.Int4
	Pain    pgtype.Int4
	Notes   pgtype.Text
}

func (q *Queries) InsertSymptoms(ctx context.Context, arg InsertSymptomsParams) (Symptom, error) {
	row := q.db.QueryRow(ctx, insertSymptoms,
		arg.Date,
		arg.Nausea,
		arg.Fatigue,
		arg.Pain,
		arg.Notes,
	)
	var i Symptom
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Nausea,
		&i.Fatigue,
		&i.Pain,
		&i.Notes,
	)
	return i, err
}
